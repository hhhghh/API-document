swagger: "2.0"
info:
  description: "This is a sample test.  You can find out more at [https://github.com/hhhghh/Dashboard](https://github.com/hhhghh/Dashboard)     For this sample, you can use the api key `special-key` to test the authorization filters."
  version: "1.0.0"
  title: "Happy spare money"
  
host: "139.196.79.193:5400"
basePath: /api/v1

tags:
- name: "Team"
  description: "Everything about your Teams"
  externalDocs:
    description: "Find out more "
    url: "https://github.com/hhhghh/Dashboard/blob/master/api_design_group.md"
- name: "User"
  description: "Operations about user"
  externalDocs:
    description: "Find out more "
    url: "https://github.com/hhhghh/Dashboard/blob/master/api_design_user.md"
- name: "Task"
  description: "Operations about task"
  externalDocs:
    description: "Find out more "
    url: "https://github.com/hhhghh/Dashboard/blob/master/api%E8%AE%BE%E8%AE%A1.md"   
    
schemes:
- "http"
- "https"


paths:
  /team/Id:
    get:
      tags:
      - "Team"
      summary: "Find team by Id"
      description: "Returns a single team"
      operationId: "getTeamById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "team_id"
        in: "query"
        description: "ID of team to return"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Team"
        213:
          description: "Team not found"
        400:
          description: "Parameter incomplete"
        412:
          description: "Abnormal"
      
  /team/Leader:
    get:
      tags:
      - "Team"
      summary: "Judge whether it is team Leader"
      description: "Returns true or false"
      operationId: "isTeamLeader"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "team_id"
        in: "query"
        description: "ID of team"
        required: true
        type: "integer"
        format: "int32"
      - name: "leader"
        in: "query"
        description: "leader of team"
        required: true
        type: "string"
      responses:
        200:
          description: "Is team leader"
        212:
          description: "Is not team leader"
        213:
          description: "Team not found"
        400:
          description: "Parameter incomplete"
        412:
          description: "Abnormal"
    
    post:
      tags:
      - "Team"
      summary: "Change leader"
      description: "Returns true or false"
      operationId: "updateTeamLeader"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "body"
        in: "body"
        description: "Change team leader"
        required: true
        schema:
          $ref: "#/definitions/Invitation"

      responses:
        200:
          description: "Successful operation"        
        212:
          description: "Team leader is wrong"
        211:
          description: "Team member is wrong"
        220:
          description: "cookie is incorrect, please log in again"
        400:
          description: "Parameter incomplete"
        412:
          description: "Abnormal"
          
  /team/Member:
    get:
      tags:
      - "Team"
      summary: "Judge whether it is team Member"
      description: "Returns true or false"
      operationId: "isTeamMember"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "team_id"
        in: "query"
        description: "ID of team"
        required: true
        type: "integer"
        format: "int32"
      - name: "member_username"
        in: "query"
        description: "member of team"
        required: true
        type: "string"
      responses:
        200:
          description: "Is team member"      
        211:
          description: "Is not team member"
        213:
          description: "Team not found"
        400:
          description: "Parameter incomplete"
        412:
          description: "Abnormal"
          
  /team/Name:
    get:
      tags:
      - "Team"
      summary: "Find team by Name"
      description: "Returns a team list"
      operationId: "getTeamByTeamName"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "team_name"
        in: "query"
        description: "Name of team"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Team"    
        213:
          description: "Team not found"
        400:
          description: "Parameter incomplete"
        412:
          description: "Abnormal"
          
  /team/Label:
    get:
      tags:
      - "Team"
      summary: "Find team by Label"
      description: "Returns a team list"
      operationId: "getTeamByTeamLabel"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "label"
        in: "query"
        description: "Label of team"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Team"
        213:
          description: "Team not found"
        400:
          description: "Parameter incomplete"
        412:
          description: "Abnormal"
          
  /team/MemberName:
    get:
      tags:
      - "Team"
      summary: "Find team by MemberName"
      description: "Returns a team list"
      operationId: "getTeamByMemberName"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "member_username"
        in: "query"
        description: "MemberName of team"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Team"       
        213:
          description: "Not joining the team" 
        400:
          description: "Parameter incomplete"
        412:
          description: "Abnormal"
          
  /team:
    post:
      tags:
      - "Team"
      summary: "Create team"
      description: "Returns a simgle team"
      operationId: "CreateTeam"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "body"
        in: "body"
        description: "Create team object"
        required: true
        schema:
          $ref: "#/definitions/TeamModel"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Team"      
        212:
          description: "Team leader does not exist"
        211:
          description: "Some Team members does not exist"
        220:
          description: "cookie is incorrect, please log in again"
        400:
          description: "Parameter incomplete"
        412:
          description: "Abnormal"
         
    put:
      tags:
      - "Team"
      summary: "Modify team"
      description: "Returns a simgle team"
      operationId: "ModifyTeam"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "body"
        in: "body"
        description: "Create team object"
        required: true
        schema:
          $ref: "#/definitions/TeamModel2"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Team"      
        212:
          description: "Team leader dose not exist or dose not correct"
        213:
          description: "Team does not exist"
        220:
          description: "cookie is incorrect, please log in again"
        400:
          description: "Parameter incomplete"
        412:
          description: "Abnormal"
    
    delete:
      tags:
      - "Team"
      summary: "Delete team"
      description: "Returns true or false"
      operationId: "deleteTeam"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "team_id"
        in: "query"
        description: "Id of team"
        required: true
        type: "integer"
        format: "int32"
      - name: "leader"
        in: "query"
        description: "Leader of team"
        required: true
        type: "string"

      responses:
        200:
          description: "Successful operation"
        212:
          description: "Team leader is wrong"
        213:
          description: "Team does not exist"
        220:
          description: "cookie is incorrect, please log in again"
        400:
          description: "Parameter incomplete"
        412:
          description: "Abnormal"
          
  /team/Member/Invitation:  
    post:
      tags:
      - "Team"
      summary: "Invitation user"
      description: "Returns true or false"
      operationId: "addUserToTeam"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "body"
        in: "body"
        description: "Create team object"
        required: true
        schema:
          $ref: "#/definitions/Invitation"

      responses:
        200:
          description: "Successful operation"
        210:
          description: "User does not exist"
        211:
          description: "User is already in the group"
        212:
          description: "Team leader is wrong, team leader verification is required"
        213:
          description: "Team does not exist"
        215:
          description: "Not allowed to add"
        220:
          description: "cookie is incorrect, please log in again"
        400:
          description: "Parameter incomplete"
        412:
          description: "Abnormal"
    
  /team/Member/Addition:  
    post:
      tags:
      - "Team"
      summary: "Addition user"
      description: "Returns true or false"
      operationId: "adduserToTeam"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "body"
        in: "body"
        description: "Create team object"
        required: true
        schema:
          $ref: "#/definitions/Addition"

      responses:
        200:
          description: "Successful operation"
        210:
          description: "User does not exist"
        211:
          description: "User is already in the group"
        213:
          description: "Team does not exist"
        214:
          description: "Team leader verification is required"
        215:
          description: "Not allowed to add"
        220:
          description: "cookie is incorrect, please log in again"
        400:
          description: "Parameter incomplete"
        412:
          description: "Abnormal"         
  
  /team/Member/Dislodge:  
    delete:
      tags:
      - "Team"
      summary: "Delete user"
      description: "Returns true or false"
      operationId: "deleteUserFromTeam"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "team_id"
        in: "query"
        description: "Id of team"
        required: true
        type: "integer"
        format: "int32"
      - name: "leader"
        in: "query"
        description: "Leader of team"
        required: true
        type: "string"
      - name: "username"
        in: "query"
        description: "Member of team"
        required: true
        type: "string"

      responses:
        200:
          description: "Successful operation"        
        211:
          description: "The team does not have that user"
        212:
          description: "Team leader is wrong"
        216:
          description: "Team leader cannot be deleted"
        220:
          description: "cookie is incorrect, please log in again"
        400:
          description: "Parameter incomplete"
        412:
          description: "Abnormal"
        
  
  /team/Member/Departure:  
    delete:
      tags:
      - "Team"
      summary: "User Leave the team"
      description: "Returns true or false"
      operationId: "deleteuserFromTeam"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "team_id"
        in: "query"
        description: "Id of team"
        required: true
        type: "integer"
        format: "int32"
      - name: "username"
        in: "query"
        description: "Member of team"
        required: true
        type: "string"

      responses:
        200:
          description: "Successful operation"     
        211:
          description: "Team member is wrong"
        213:
          description: "There is no team"
        216:
          description: "Team leader cannot leave the team"
        220:
          description: "cookie is incorrect, please log in again"
        400:
          description: "Parameter incomplete"
        412:
          description: "Abnormal"
          
  /file/TeamLogo:  
    post:
      tags:
      - "Team"
      summary: "Upload team logo"
      description: "Returns url of team logo"
      operationId: "UploadTeamLogo"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "logo"
        in: "formData"
        description: "team logo"
        required: true
        type: "file"

      responses:
        200:
          description: "Successful operation"  
       
        

  /task:
    get:
      tags:
        - "Task"
      summary: "find tasks satisfiy the restrictions"
      description: |
        Find tasks the satisfiy the type and range, and can be seen by the user,
        type:任务类型,
        range:任务发布范围 `all`或者`group.id` 根据type
        range查找所有任务Tasks
        (根据user.id从`屏蔽列表`找到屏蔽该user的releaser查找releaser所有发布的任务t_set0. 根据Tasks信息，比较每个task.score与user.score， 若task.score > user.score, t_set1.append(task) 返回(Tasks - t_set0 - t_set1)
      operationId: "getTask"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        # - name: "acceptableOnly"
        #   in: "query"
        #   description: "Whether you want the acceptable only"
        #   required: false
        #   type: "boolean"
        - name: "type"
          in: "query"
          description: "The desired type, which can be `all` or `1,2,3` means `1 or 2 or 3`"
          required: true
          type: "string"
        - name: "range"
          in: "query"
          description: "The desired range, which can be `all` or some group id, as `type`'s description"
          required: true
          type: "string"
        - name: "username"
          in: "query"
          description: "The desired username"
          required: true
          type: "string"
      responses:
        200:
          description: "Successful execute, find some (or no) task"
          schema:
            $ref: "#/definitions/task"
        412:
          description: "Parameters is not satisfiy required"
          
    post:
      tags:
      - "Task"
      summary: "Create a task"
      description: "Returns a simgle task"
      operationId: "CreateTask"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "body"
        in: "body"
        description: "Create task object"
        required: true
        schema:
          $ref: "#/definitions/task_create_param"
      responses:
        200:
          description: "Successful create a task"
          schema:
            $ref: "#/definitions/task"
        412:
          description: "Abnormal"
        413:
          description: "Team leader does not exist"
        414:
          description: "Some Team members does not exist"
        416:
          description: "Parameter incomplete"
    
    delete:
      tags:
        - "Task"
      summary: "Delete a task by task id"
      description: "Try to delete a task by task id, should apply other informations for verification"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "task_id"
          in: "query"
          description: "The task id"
          type: "string"
          required: true
        - name: "Others param"
          in: "query"
          description: "TODO, may use session or something ... At this time, just don't need that."
          type: "string"
          required: true
      responses:
        200:
          description: "ok"
        412:
          description: "params wrong"
        403:
          description: "Unauthorized, may should use 401"
          

  /task/findByPublisher:
    get:
      tags:
        - "Task"
      summary: "Find all tasks established by publisher"
      description: "Find all tasks established by publisher"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "publisher"
          in: "query"
          description: "the publisher's username"
          type: "string"
          required: true
        - name: "type"
          in: "query"
          description: "the desired type, can be `all` or `1` or `1,2,3`"
          type: "string"
        - name: "range"
          in: "query"
          description: "the desired range, can be `all` or `1` or `1,2,3`"
          type: "string"
      responses:
        200:
          description: "Successful execute, find some (or no) task"
          schema:
            $ref: "#/definitions/task"
        412:
          description: "Parameters is not satisfiy required"


  /task/findByTaskId:
    get:
      tags:
        - "Task"
      summary: "Find the task by the task id"
      description: "Find the task by the task id"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "task_id"
          in: "query"
          description: "the task's id"
          type: "integer"
          required: true
      responses:
        200:
          description: "Successful execute, find some (or no) task"
          schema:
            $ref: "#/definitions/task"
        412:
          description: "Parameters is not satisfiy required"

                     
  /task/findByAccepter:
    get:
      tags:
        - "Task"
      summary: "Find all tasks accepted by the user"
      description: "Find all tasks be accepted by user"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "the user's username"
          type: "string"
          required: true
        - name: "type"
          in: "query"
          description: "the desired type"
          type: "string"
        - name: "range"
          in: "query"
          description: "the desired range"
          type: "string"
      responses:
        200:
          description: "Successful execute, find some (or no) task"
          schema:
            $ref: "#/definitions/task"
        412:
          description: "Parameters is not satisfiy required"
  
  /task/acceptance:
    get: 
      tags:
        - "Task"
      summary: "Get relations between a user and a task"
      description: "Get relations between a user and a task"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "query"
          description: "the user's username"
          type: "string"
          required: true
        - name: "task_id"
          in: "query"
          description: "the desired type"
          type: "string"
          required: true
      responses:
        200:
          description: "Successful execute, find some (or no) task"
          schema:
            $ref: "#/definitions/task"
        412:
          description: "Parameters is not satisfiy required"
          
    post:
      tags:
        - "Task"
      summary: "User accept a task"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "body"
          in: "body"
          description: "Accept a task"
          required: true
          schema:
            $ref: "#/definitions/task_acceptance"
      responses:
        200:
          description: "Successful execute, find some (or no) accepter"
          schema:
            $ref: "#/definitions/task"
        412:
          description: "Parameters is not satisfiy required"
          
    delete:
      tags:
        - "Task"
      summary: "Quit a task"
      description: "Quit a task"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "task_id"
          in: "query"
          description: "the task's id"
          type: "integer"
          required: true
        - name: "username"
          in: "query"
          description: "the quiter's username"
          type: "string"
          required: true
      responses:
        200:
          description: "Successful execute, find some (or no) task"
          schema:
            $ref: "#/definitions/task"
        412:
          description: "Parameters is not satisfiy required"
  
  /task/complement:
    post:
      tags:
        - "Task"
      summary: "Complete a task"
      description: "Complete a task, remember to give a score"
      produces:
        - "application/json"
        - "application/xml"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/task_complement"
      responses:
        200:
          description: "Successful execute, find some (or no) task"
          schema:
            $ref: "#/definitions/task"
        412:
          description: "Parameters is not satisfiy required"
  
  /task/comfirm:
    post:
      tags:
        - "Task"
      summary: "Publisher confirm task over"
      description: "Publisher will confirm the task is over, set the TR's state to OVER state."
      produces:
        - "application/json"
        - "applicaiton/xml"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/confirm_params"
      responses:
        200:
          description: "Success confirm the task"
        412:
          description: "The params are not enough"
        500:
          description: "Wrong in the server"
  
  /task/accepter:
    get:
      tags:
        - "Task"
      summary: "Find all accepters of a task"
      description: "return all of the accepters of a task\n The task id should be one integer."
      produces:
        - "application/json"
        - "applicaiton/xml"
      parameters:
        - name: "task_id"
          in: "query"
          type: "integer"
          required: true
      responses:
        200:
          description: "Successfully return the task"
          schema:
            $ref: "#/definitions/task"
        412:
          description: "The params are not enough"
        500:
          description: "Wrong in the server"


  /user/login:
    post:
      tags:
        - "User"
      summary: "login"
      description: "Log in according to the login type, user name and password"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/user_login"
      responses:
        200:
          description: "登录成功"
        412:
          description: "用户名或密码错误"
        413:
          description: "账户类型错误"
        500:
          description: "服务器异常" 
  
  /user/logout:
    post:
      tags:
        - "User"
      summary: "logout"
      description: "log out through cookies"
      responses:
        200:
          description: "登出成功"
        401:
          description: "未携带cookies"
        402:
          description: "cookies已过期，已自动登出"

  /user/getuser:
    get:
      tags:
        - "User"
      summary: "get user information"
      description: "get user information by username"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        required: true
        description: "username"
      responses:
        200:
          description: "查询成功并返回用户基本信息"
          schema:
            $ref: "#/definitions/user_getinfo"
        400:
          description: "参数错误"
        412:
          description: "查询用户不存在"
        500:
          description: "服务器异常" 

  /user/getorg:
    get:
      tags:
        - "User"
      summary: "get organization information"
      description: "get organization information by organization's name"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "organization's name"
        in: "query"
        required: true
        description: "organization's name"
      responses:
        200:
          description: "查询成功并返回用户基本信息"
          schema:
            $ref: "#/definitions/user_getorg"
        400:
          description: "参数错误"
        412:
          description: "查询机构不存在"
        500:
          description: "服务器异常" 

  /user/update:
    put:
      tags:
        - "User"
      summary: "update user or organization information"
      description: "update user information"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "body"
        in: "body"
        required: true
        description: "update information"
        schema:
          $ref: "#/definitions/user_update"  
      responses:
        200:
          description: "修改成功并返回修改后的用户信息"
        412:
          description: "更新失败"
        500:
          description: "服务器异常"
  
  /user/score:
    post:
      tags:
        - "User"
      summary: "update user's score"
      description: "update user's score"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "body"
        in: "body"
        required: true
        description: "update score"
        schema:
          $ref: "#/definitions/user_score"  
      responses:
        200:
          description: "修改成功并返回修改后的信用分数"
        412:
          description: "更新失败"
        500:
          description: "服务器异常"
  
  /user/userblacklist:
    post:
      tags:
        - "User"
      summary: "user blacklist"
      description: "user blacklist user or organization"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "body"
        in: "body"
        required: true
        description: "username1 username2"
        schema:
          $ref: "#/definitions/user_blacklist"  
      responses:
        200:
          description: "拉黑成功"
        402:
          description: "被拉黑的机构或用户不存在"
        403:
          description: "用户不存在"
        405:
          description: "机构没有拉黑功能"
        406:
          description: "已拉黑，不能重复拉黑"
        500:
          description: "服务器异常" 

  /user/teamblacklist:
    post:
      tags:
        - "User"
      summary: "team blacklist"
      description: "team blacklist organization"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "body"
        in: "body"
        required: true
        description: "ins_name team_id"
        schema:
          $ref: "#/definitions/team_blacklist"  
      responses:
        200:
          description: "拉黑成功"
        402:
          description: "被拉黑的机构"
        403:
          description: "该用户不是机构"
        405:
          description: "小组不存在"
        406:
          description: "已拉黑，不能重复拉黑"
        500:
          description: "服务器异常" 

  /user/usercancelblack:
    post:
      tags:
        - "User"
      summary: "user cancel blacklist"
      description: "user cancel blacklist organization"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "body"
        in: "body"
        required: true
        description: "username1 username2"
        schema:
          $ref: "#/definitions/user_cancelblacklist"  
      responses:
        200:
          description: "取消拉黑成功"
        402:
          description: "取消拉黑的机构或用户不存在"
        403:
          description: "用户不存在"
        405:
          description: "没有拉黑过的用户或机构不能取消拉黑"
        406:
          description: "机构不能取消拉黑"
        500:
          description: "服务器异常"

  /user/teamcancelblack:
    post:
      tags:
        - "User"
      summary: "team blacklist"
      description: "team blacklist organization"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "body"
        in: "body"
        required: true
        description: "ins_name team_id"
        schema:
          $ref: "#/definitions/team_cancelblacklist"  
      responses:
        200:
          description: "取消屏蔽成功"
        402:
          description: "取消拉黑机构不存在"
        403:
          description: "该用户不是机构"
        405:
          description: "小组不存在"
        406:
          description: "没有拉黑无法取消拉黑"
        500:
          description: "服务器异常" 

  /user/getAcceptedFinishedTasks:
    get:
      tags:
        - "User"
      summary: "user finished task"
      description: "get the user finished task by username"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        required: true
        description: "username"
      responses:
        200:
          description: "查询成功并返回用户完成的任务"
          schema:
            $ref: "#/definitions/user_getAcceptedFinishedTasks"
        412:
          description: "用户不存在"
        500:
          description: "服务器异常" 
  
  /user/getPublishedWaitedTasks:
    get:
      tags:
        - "User"
      summary: "Evaluate the person who has completed the task"
      description: "Evaluate the person who has completed the task"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        required: true
        description: "username"
      responses:
        200:
          description: "查询成功并返回用户发布的等待接受的任务"
          schema:
            $ref: "#/definitions/user_getPublishedWaitedTasks"
        412:
          description: "用户不存在"
        500:
          description: "服务器异常" 
  
  /user/setRate:
    post:
      tags:
        - "User"
      summary: ""



# securityDefinitions:
#   petstore_auth:
#     type: "oauth2"
#     authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
#     flow: "implicit"
#     scopes:
#       write:pets: "modify pets in your account"
#       read:pets: "read your pets"
#   api_key:
#     type: "apiKey"
#     name: "api_key"
#     in: "header"   
   
      
definitions:     
  Teamlabels:
    type: "object"
    required:
    - "team_id"
    - "label"
    properties:
      team_id:
        type: "integer"
        format: "int32"
      label:
        type: "string"
    xml:
      name: "Teamlabels"
      
  Members:
    type: "object"
    required:
    - "team_id"
    - "member_username"
    properties:
      team_id:
        type: "integer"
        format: "int32"
      member_username:
        type: "string"
    xml:
      name: "Members"
      
  Team:
    type: "object"
    required:
    - "team_name"
    - "leader"
    properties:
      team_id:
        type: "integer"
        format: "int32"
      team_name:
        type: "string"
      leader:
        type: "string"
      logo:
        type: "string"
      description:
        type: "string"
      limit:
        type: "integer"
        format: "int32"
      teamlabels:
        type: "array"
        items:
          $ref: "#/definitions/Teamlabels"
      members:
        type: "array"
        items:
          $ref: "#/definitions/Members"
    xml:
      name: "Team"
      
  TeamModel:
    type: "object"
    required:
    - "team_name"
    - "leader"
    - "members"
    properties:
      team_name:
        type: "string"
        example: ""
      leader:
        type: "string"
        example: ""
      logo:
        type: "string"
        example: "http://139.196.79.193:3000/awesomeface.png"
      description:
        type: "string"
        example: ""
      limit:
        type: "integer"
        format: "int32"
      teamlabels:
        type: "array"
        items:
          $ref: "#/definitions/labels"
      members:
        type: "array"
        items:
          $ref: "#/definitions/members"
    xml:
      name: "TeamModel"
  
  TeamModel2:
    type: "object"
    required:
    - "team_id"
    - "leader"
    - "members"
    properties:
      team_id:
        type: "integer"
        format: "int32"
      team_name:
        type: "string"
        example: ""
      leader:
        type: "string"
        example: ""
      logo:
        type: "string"
        example: "http://139.196.79.193:3000/awesomeface.png"
      description:
        type: "string"
        example: ""
      limit:
        type: "integer"
        format: "int32"
      teamlabels:
        type: "array"
        items:
          $ref: "#/definitions/labels"
      
    xml:
      name: "TeamModel2"
      
  labels:
    type: "object"
    required:
    - "label"
    properties:
      label:
        type: "string"
        example: ""
    xml:
      name: "labels"
      
  members:
    type: "object"
    required:
    - "member_username"
    properties:
      member_username:
        type: "string"
        example: ""
    xml:
      name: "members"
      
  Invitation:
    type: "object"
    required:
    - "team_id"
    - "leader"
    - "user"
    properties:
      team_id:
        type: "integer"
        format: "int32"
      leader:
        type: "string"
        example: ""
      user:
        type: "array"
        items:
          type: "object"
          properties:
            username:
              type: "string"
              example: ""
    xml:
      name: "Invitation"
      
  Addition:
    type: "object"
    required:
    - "team_id"
    - "username"
    properties:
      team_id:
        type: "integer"
        format: "int32"
      username:
        type: "string"
        example: ""
    xml:
      name: "Addition"

  task:
    type: "object"
    required:
    - "task_id"
    - "introduction"
    - "money"
    - "score"
    - "max_accepter_number"
    - "publisher"
    - "type"
    - "starttime"
    - "endtime"
    - "content"
    - "range"
    properties:
      task_id:
        type: "integer"
        format: "int32"
      introduction:
        type: "string"
        example: "a task can be done"
      money:
        type: "number"
        example: 10
        description: "The money will be paid"
      max_accepter_number:
        type: "integer"
        example: "100"
        description: "Max number of people who can accept the task"
      publisher:
        type: "string"
        example: "hyx"
        description: "The username of the release user"
      score:
        type: "number"
        example: 3.5
      type:
        type: "integer"
        example: 2
      starttime:
        type: "string"
        example: "2018-11-01 11:00:00"
      endtime: 
        type: "string"
        example: "2018-11-02 11:03:03"
      content: 
        type: "string"
        example: "sad"
      range: 
        type: "array"
        example: [1,2,3]
    xml:
      name: "task"

  task_create_param:
    type: "object"
    required:
      - "title"
      - "introduction"
      - "money"
      - "score"
      - "max_accepter_number"
      - "publisher"
      - "type"
      - "starttime"
      - "endtime"
      - "content"
      - "range"
    properties:
      title:
        type: "string"
        example: "Help me to buy food"
      introduction:
        type: "string"
        example: "a task can be done"
      money:
        type: "number"
        example: 10
        description: "The money will be paid"
      score:
        type: "number"
        example: 3.5
      max_accepter_number:
        type: "integer"
        example: "100"
        description: "Max number of people who can accept the task"
      publisher:
        type: "string"
        example: "hyx"
        description: "The username of the release user"
      type:
        type: "integer"
        example: 2
      starttime:
        type: "string"
        example: "2018-11-01 11:00:00"
      endtime: 
        type: "string"
        example: "2018-11-02 11:03:03"
      content: 
        type: "string"
        example: "sad"
      range: 
        type: "array"
        example: [1,2,3]
    xml:
      name: "task"
  
  task_acceptance:
    type: "object"
    required: 
      - "task_id"
      - "username"
    properties:
      task_id:
        type: "integer"
        example: 2
      username:
        type: "string"
        example: "hyx"
        description: "The accepter's username"
    xml:
      name: "task_acceptance"
  
  task_complement:
    type: "object"
    required: 
      - "task_id"
      - "username"
    properties:
      task_id:
        type: "integer"
        example: 2
      username:
        type: "string"
        example: "hyx"
    xml:
      name: "task_complement"

  confirm_params:
    type: "object"
    required:
      - "username"
      - "task_id"
      - "score"
    properties:
      username:
        type: "string"
        example: "hyx"
        description: "the accepter's username"
      task_id:
        type: "integer"
        example: 2
        description: "The task's id"
      score:
        type: "integer"
        example: 3
        description: "The publisher make a score to accepter"
        
  user_login:
    type: "object"
    require:
      -"type"
      -"username"
      -"password"
    properties:
      type:
        type: "integer"
        example: 0
      username:
        type: "string"
        example: "hzh"
      password:
        type: "string"
        example: "123"
    xml:
      name: "user_login"

  user_getinfo:
    type: "object"
    require:
      -"code"
      -"msg"
      -"data"
    properties:
      code:
        type: "integer"
        example: 200
      msg:
        type: "string"
        example: "success"
      data:
        type: "object"
        require:
          -"username"
          -"name"
          -"school"
          -"grade"
          -"phone"
          -"weChat"
          -"qq"
        properties:
          username:
            type: "string"
            example: "hzh"
          name:
            type: "string"
            example: "hzh"
          school:
            type: "string"
            example: "SYSU"
          grade:
            type: "integer"
            example: 4
          phone:
            type: "string"
            example: null
          wechat:
            type: "string"
            example: null
          qq:
            type: "string"
            example: null         
    xml:
      name: "user_getinfo"
  
  user_getorg:
    type: "object"
    require:
      -"code"
      -"msg"
      -"data"
    properties:
      code:
        type: "integer"
        example: 200
      msg:
        type: "string"
        example: "success"
      data:
        type: "object"
        require:
          -"orgname"
          -"score"
          -"school"
          -"wechat"
          -"qq"
          -"phone_number"
        properties:
          orgname:
            type: "string"
            example: "test4"
          score:
            type: "integer"
            example: 100
          school:
            type: "string"
            example: "SYSU"
          wechat:
            type: "string"
            example: null
          qq:
            type: "string"
            example: null
          phone_number:
            type: "string"
            example: null
    xml:
      name: "user_getorg"
  
  user_update:
    type: "object"
    require:
      -"username"
      -"password"
      -"score"
      -"money"
      -"true_name"
      -"school_name"
      -"grade"
      -"avatar"
      -"nickname"
      -"wechat"
      -"QQ"
      -"phone_number"
      -"account_state"
    properties:
      username:
        type: "string"
        example: "hyx"
      password:
        type: "string"
        example: "123"
      score:
        type: "integer"
        example: 100
      money:
        type: "integet"
        example: 1632
      true_name:
        type: "string"
        example: "韩"
      school_name:
        type: "string"
        example: "SYSU"
      grade:
        type: "integer"
        example: 5
      avatar:
        type: "string"
        example: "default url waiting be set"
      nickname:
        type: "string"
        example: "hyx"
      wechat:
        type: "string"
        example: null
      QQ:
        type: "string"
        example: null
      phone_number:
        type: "string"
        example: null
      account_state:
        type: "string"
        example: 0
    xml:
      name: "user_update" 

  user_score:
    type: "object"
    require:
      -"username"
      -"score"
    properties:
      username:
        type: "string"
        example: "hyx"
      score:
        type: "integer"
        example: 20
    xml:
      name: "user_score"

  user_blacklist:
    type: "object"
    require:
      -"username1"
      -"username2"
    properties:
      username1:
        type: "string"
        example: "hyx"
      username2:
        type: "string"
        example: "hzh"
    xml:
      name: "user_blacklist"

  team_blacklist:
    type: "object"
    require:
      -"ins_name"
      -"team_id"
    properties:
      ins_name:
        type: "string"
        example: "test4"
      team_id:
        type: "string"
        example: "1"
    xml:
      name: "team_blacklist"

  user_cancelblacklist:
    type: "object"
    require:
      -"username1"
      -"username2"
    properties:
      username1:
        type: "string"
        example: "hyx"
      username2:
        type: "string"
        example: "hzh"
    xml:
      name: "user_cancelblacklist"

  team_cancelblacklist:
    type: "object"
    require:
      -"ins_name"
      -"team_id"
    properties:
      ins_name:
        type: "string"
        example: "test4"
      team_id:
        type: "string"
        example: "1"
    xml:
      name: "team_cancelblacklist"

  user_getAcceptedFinishedTasks:
    type: "object"
    require:
      -"code"
      -"msg"
      -"data"
    properties:
      code:
        type: "integer"
        example: 200
      msg:
        type: "string"
        example: "success"
      data:
        type: "object"
        require:
          -"task_id"
          -"title"
          -"introduction"
          -"starttime"
          -"endtime"
          -"score"
          -"money"
        properties:
          task_id:
            type: "integer"
            example: 1
          title:
            type: "string"
            example: "问卷调查"
          introduction:
            type: "string"
            example: "null"
          starttime:
            type: "string"
            example: "2018-11-01T03:00:00.000Z"
          endtime:
            type: "string"
            example: "2018-11-02T03:03:03.000Z"
          score:
            type: "integer"
            example: 4
          money:
            type: "integer"
            example: 10 
    xml:
      name: "user_getAcceptedFinishedTasks"

  user_getPublishedWaitedTasks:
    type: "object"
    require:
      -"code"
      -"msg"
      -"data"
    properties:
      code:
        type: "integer"
        example: 200
      msg:
        type: "string"
        example: "success"
      data:
        type: "object"
        require:
          -"task_id"
          -"title"
          -"introduction"
          -"starttime"
          -"endtime"
          -"score"
          -"money"
        properties:
          task_id:
            type: "integer"
            example: 1
          title:
            type: "string"
            example: "问卷调查"
          introduction:
            type: "string"
            example: "null"
          starttime:
            type: "string"
            example: "2018-11-01T03:00:00.000Z"
          endtime:
            type: "string"
            example: "2018-11-02T03:03:03.000Z"
          score:
            type: "integer"
            example: 4
          money:
            type: "integer"
            example: 10 
    xml:
      name: "user_getPublishedWaitedTasks"
      
